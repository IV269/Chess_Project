!function(){"use strict";class i{constructor(i,s,t="rgb(12,36,98)",h="rgb(178 189,231)"){this.can=i;let o=s;this.nx=s>5?s:8,this.ny=o<1?this.nx:o>5?o:this.nx,this.blackcolor=t,this.whitecolor=h,this.prevx=0,this.prevy=0,this.prevWidth=this.can.width,this.prevHeight=this.can.height,this.offsetL=this.can.offsetLeft,this.offsetT=this.can.offsetTop+50,this.w=this.can.width,this.h=this.can.height,this.constW=this.can.width,this.constH=this.can.height,this.cellSizeW=this.w/this.nx,this.cellSizeH=this.h/this.ny,this.board=[],this.lastMoved=[-1,-1],this.isLongP=!1,this.enPasant=!1,this.color="w",this.posKings={},this.lastPiece=e(-2,-2),this.Poses=new Set,this.isUnderCheckB=!1,this.isUnderCheckW=!1,this.isMate=!1,this.RokirW=[!0,!0],this.RokirB=[!0,!0],this.isRok=!1;for(let i=0;i<this.ny;i++)this.board[i]=[];for(let i=0;i<this.ny;i++)for(let s=0;s<this.nx;s++)this.board[this.ny-i-1][s]=(s+i)%2==1?["w",void 0]:["b",void 0]}UpdateInfo(i,s){let t=s.x,h=s.y,e=0,o=0,n=0;t<this.w&&(e=Math.ceil((this.w-t)/this.nx)),h<this.h&&(o=Math.ceil((this.h-h)/this.ny)),n=Math.max(e*this.nx,o*this.ny),0==n&&this.prevx>=0&&this.prevy>=0&&(this.w<this.constW&&t>this.w&&(e=Math.ceil((t-this.w)/this.nx)),this.h<this.constH&&h>this.h&&(o=Math.ceil((h-this.h)/this.ny)),-1!=this.prevx&&-1!=this.prevy&&(n=-Math.min(Math.max(e*this.nx,o*this.ny),Math.min(h-this.h,t-this.w)))),i.width-=n,i.height-=n,(i.width>this.constW||i.height>this.constH)&&(i.width=this.constW,i.height=this.constH),this.prevx=t-this.prevWidth,this.prevy=h-this.prevHeight,this.prevWidth=t,this.prevHeight=h,0==n&&(this.prevx=0,this.prevy=0),this.can=i,this.w=this.can.width,this.h=this.can.height,this.offsetL=this.can.offsetLeft,this.cellSizeW=this.w/this.nx,this.cellSizeH=this.h/this.ny,this.offsetT=this.can.offsetTop+50;for(let i=0;i<this.ny;i++)for(let s=0;s<this.nx;s++)null!=this.board[i][s][1]&&(this.board[i][s][1].width=this.w/this.nx,this.board[i][s][1].height=this.h/this.ny,this.ImageAttach(this.board[i][s][1]))}DrawBoard(){let i=this.can.getContext("2d");i.beginPath();for(let s=0;s<this.ny;s++)for(let t=0;t<this.nx;t++)"b"==this.board[s][t][0][0]?i.fillStyle=this.blackcolor:i.fillStyle=this.whitecolor,i.fillRect(t*this.w/this.nx,s*this.h/this.ny,(t+1)*this.w/this.nx,(s+1)*this.h/this.ny);i.stroke()}DrawFigures(){let i=this.can.getContext("2d");i.beginPath(),this.isMate?"w"==this.color?"K"==this.board[this.posKings.w[0]][this.posKings.w[1]][0].slice(2,3)&&(this.board[this.posKings.w[0]][this.posKings.w[1]][0]=this.board[this.posKings.w[0]][this.posKings.w[1]][0].slice(0,1),this.board[this.posKings.w[0]][this.posKings.w[1]][1]=void 0,t("./Figures/wS.png",this,e(this.posKings.w[1],this.ny-this.posKings.w[0]-1),e(this.cellSizeW))):"K"==this.board[this.posKings.b[0]][this.posKings.b[1]][0].slice(2,3)&&(this.board[this.posKings.b[0]][this.posKings.b[1]][0]=this.board[this.posKings.b[0]][this.posKings.b[1]][0].slice(0,1),this.board[this.posKings.b[0]][this.posKings.b[1]][1]=void 0,t("./Figures/bS.png",this,e(this.posKings.b[1],this.ny-this.posKings.b[0]-1),e(this.cellSizeW))):this.isPat&&("K"==this.board[this.posKings.w[0]][this.posKings.w[1]][0].slice(2,3)&&"w"==this.board[this.posKings.w[0]][this.posKings.w[1]][0].slice(1,2)?(this.board[this.posKings.w[0]][this.posKings.w[1]][0]=this.board[this.posKings.w[0]][this.posKings.w[1]][0].slice(0,1),this.board[this.posKings.w[0]][this.posKings.w[1]][1]=void 0,t("./Figures/wS.png",this,e(this.posKings.w[1],this.ny-this.posKings.w[0]-1),e(this.cellSizeW))):"K"==this.board[this.posKings.b[0]][this.posKings.b[1]][0].slice(2,3)&&"b"==this.board[this.posKings.b[0]][this.posKings.b[1]][0].slice(1,2)&&(this.board[this.posKings.b[0]][this.posKings.b[1]][0]=this.board[this.posKings.b[0]][this.posKings.b[1]][0].slice(0,1),this.board[this.posKings.b[0]][this.posKings.b[1]][1]=void 0,t("./Figures/bS.png",this,e(this.posKings.b[1],this.ny-this.posKings.b[0]-1),e(this.cellSizeW))));for(let s=0;s<this.ny;s++)for(let t=0;t<this.nx;t++)null!=this.board[s][t][1]&&i.drawImage(this.board[s][t][1].img,this.board[s][t][1].posx*this.cellSizeW,(this.ny-this.board[s][t][1].posy-1)*this.cellSizeH,this.board[s][t][1].width,this.board[s][t][1].height);i.stroke()}DrawBorder(){let i=this.can.getContext("2d");i.beginPath(),i.moveTo(0,0),i.lineTo(this.w,0),i.stroke(),i.moveTo(0,0),i.moveTo(this.w,0),i.lineTo(this.w,this.h),i.stroke(),i.moveTo(this.w,this.h),i.lineTo(0,this.h),i.stroke(),i.moveTo(0,this.h),i.lineTo(0,0),i.stroke()}DrawPosMoves(i,s=void 0,t="#c22958",h="#76e08c",o="#e07693"){if(null==i)return;let n=i.x,l=i.y;if(null==n||null==l||n<0||l<0||n>=this.nx||l>=this.ny)return;let r=this.can.getContext("2d");r.beginPath();let a=!1;if(this.lastPiece.x>=0&&this.lastPiece.y>=0&&this.lastPiece.x<this.nx&&this.lastPiece.y<this.ny&&n==this.lastPiece.x&&l==this.lastPiece.y?a=!0:this.Poses.clear(),this.lastPiece=e(i.x,i.y),a){let i,s,e,o;for(const n of this.Poses)"norm"==n[0]?(r.fillStyle=t,e=Math.min(this.w/this.nx,this.h/this.ny)/4,i=(n[1].x*this.w+this.w/2)/this.nx-e/2,s=(n[1].y*this.h+this.h/2)/this.ny-e/2,r.fillRect(i,s,e,e)):"eat"==n[0]?(r.fillStyle=h,e=this.w/this.nx,o=this.h/this.ny,i=n[1].x*this.w/this.nx,s=n[1].y*this.h/this.ny,r.fillRect(i,s,e,o)):"old"==n[0]&&(r.fillStyle=t,r.fillRect(n[1].x*this.w/this.nx,n[1].y*this.h/this.ny,this.w/this.nx,this.h/this.ny))}else for(let i=0;i<this.ny;i++)for(let s=0;s<this.nx;s++)if(i==l&&s==n)r.fillStyle=t,r.fillRect(n*this.w/this.nx,l*this.h/this.ny,this.w/this.nx,this.h/this.ny),this.Poses.add(["old",e(n,l)]);else if(null!=this.board[l][n][1]&&this.canMove(n,l,s,i,!1)){let o,n,l;if(null!=this.board[i][s][1]||this.enPasant){r.fillStyle=h,l=this.w/this.nx;let t=this.h/this.ny;o=s*this.w/this.nx,n=i*this.h/this.ny,r.fillRect(o,n,l,t),this.Poses.add(["eat",e(s,i)])}else r.fillStyle=t,l=Math.min(this.w/this.nx,this.h/this.ny)/4,o=(s*this.w+this.w/2)/this.nx-l/2,n=(i*this.h+this.h/2)/this.ny-l/2,r.fillRect(o,n,l,l),this.Poses.add(["norm",e(s,i)])}if(null!=s){let i=s.x,t=s.y;if(null==i||null==t||i<0||t<0||i>=this.nx||t>=this.ny||n==i&&l==t)return;r.fillStyle=o,r.fillRect(i*this.w/this.nx,t*this.h/this.ny,this.w/this.nx,this.h/this.ny)}r.stroke()}DrawCheck(i="#f7e87dce",s="#3e3d3cce"){if(this.isUnderCheckB||this.isUnderCheckW||this.isPat){let t,h,e,o=this.can.getContext("2d");o.beginPath(),t=this.isUnderCheckB?this.posKings.b:this.posKings.w,h=t[1],e=t[0],this.isMate?o.fillStyle=s:o.fillStyle=i,this.isPat?this.isPat&&(o.fillStyle=s,t=this.posKings.b,h=t[1],e=t[0],o.fillRect(h*this.w/this.nx,e*this.h/this.ny,this.w/this.nx,this.h/this.ny),t=this.posKings.w,h=t[1],e=t[0],o.fillRect(h*this.w/this.nx,e*this.h/this.ny,this.w/this.nx,this.h/this.ny)):o.fillRect(h*this.w/this.nx,e*this.h/this.ny,this.w/this.nx,this.h/this.ny),o.stroke()}}GetPosBoard(i,s){if("object"!=typeof i){if(null==s||null==i||s<this.offsetT||s>this.offsetT+this.w||i<this.offsetL||i>this.offsetL+this.h)return;return e(Math.floor((i-this.offsetL)/this.h*this.ny),Math.floor((s-this.offsetT)/this.w*this.nx))}if(!(null==i.x||null==i.y||i.x<this.offsetT||i.x>this.offsetT+this.w||i.y<this.offsetL||i.y>this.offsetL+this.h))return e(Math.floor((i.y-this.offsetL)/this.h*this.ny),Math.floor((i.x-this.offsetT)/this.w*this.nx))}GetPosReal(i,s){if("object"!=typeof i){if(null==s||null==i||s<0||i<0||s>=this.nx||i>=this.ny)return;return e(this.h-(i+1)*this.cellSizeH+this.offsetT,s*this.cellSizeW+this.offsetL)}if(!(null==i.x||null==i.y||i.x<0||i.y<0||i.x>=this.nx||i.y>=this.ny))return e(this.h-(i.y+1)*this.cellSizeH+this.offsetT,i.x*this.cellSizeW+this.offsetL)}GetPosRealBoard(i,s){if("object"!=typeof i){if(null==s||null==i||s<0||i<0||s>=this.ny||i>=this.nx)return;return e(this.h-(i+1)*this.cellSizeH,s*this.cellSizeW)}if(!(null==i.x||null==i.y||i.x<0||i.y<0||i.x>=this.ny||i.y>=this.nx))return e(this.h-(i.y+1)*this.cellSizeH,i.x*this.cellSizeW)}toReversed(i){return e(i.x,this.ny-i.y-1)}ImageAttach(i){try{let s=i.posx,t=this.ny-i.posy-1,h=this.GetPosRealBoard(s,t);null!=h&&1==this.board[t][s][0].length?("K"==i.name[1]&&("b"==i.name[0]?this.posKings.b=[t,s]:this.posKings.w=[t,s]),this.board[t][s][1]=i,this.board[t][s][0]+=i.name):null==h&&console.log("Something wrong in coordinates...")}catch(i){console.log(`Function: "ImageAttach": ${i}`)}}NewBoard(i){for(let s=0;s<this.ny;s++)for(let h=0;h<this.nx;h++)this.board[s][h]=[],this.board[s][h][0]=i[s][h][0],this.board[s][h][1]=void 0,this.board[s][h][0].length>1&&(this.board[s][h][1]=t(`./Figures/${this.board[s][h][0].slice(1)}.png`,this,e(h,this.ny-s-1),e(this.cellSizeW,this.cellSizeH)))}setFigures(){for(let i=0;i<this.ny;i++)for(let s=0;s<this.nx;s++)null!=this.board[i][s][1]&&this.figure(s,i)}figure(i,s){this.board[s][i][1].figure.name=this.board[s][i][1].name[1],this.board[s][i][1].figure.color=this.board[s][i][1].name[0],this.board[s][i][1].figure.ismove=!1,this.board[s][i][1].figure.isLocked=!1}checkOnMove(i,s){return null==this.board[s][i][1]}canMove(i,s,t,h,e=!0,o=!1){let n=this.board[s][i][1].figure,l=!1;if(this.enPasant=!1,n.color==this.color||o)if("P"==n.name)"w"==n.color?i==t?s==h+1?this.checkOnMove(i,h)&&(e&&(n.ismove=!0,this.lastMoved=[t,h],this.isLongP=!1),this.enPasant=!1,l=!0):s==h+2&&this.checkOnMove(i,h+1)&&this.checkOnMove(i,h)&&!n.ismove&&(e&&(n.ismove=!0,this.lastMoved=[t,h],this.isLongP=!0),this.enPasant=!1,l=!0):t!=i-1&&t!=i+1||s==h+1&&(this.checkOnMove(t,h)||"b"!=this.board[h][t][1].name[0]?this.checkOnMove(t,s)||this.lastMoved[0]!=t||this.lastMoved[1]!=s||"P"==this.board[s][t][1].name[1]&&"b"==this.board[s][t][1].name[0]&&this.isLongP&&(e&&(n.ismove=!0,this.lastMoved=[t,h],this.board[s][t][0]=this.board[s][t][0].slice(0,1),this.board[s][t][1]=void 0,this.isLongP=!1),this.enPasant=!0,l=!0):(e&&(n.ismove=!0,this.lastMoved=[t,h],this.isLongP=!1),this.enPasant=!1,l=!0)):i==t?s==h-1?this.checkOnMove(i,h)&&(e&&(n.ismove=!0,this.lastMoved=[t,h],this.isLongP=!1),this.enPasant=!1,l=!0):s==h-2&&this.checkOnMove(i,h-1)&&this.checkOnMove(i,h)&&!n.ismove&&(e&&(n.ismove=!0,this.lastMoved=[t,h],this.isLongP=!0),this.enPasant=!1,l=!0):t!=i-1&&t!=i+1||s==h-1&&(this.checkOnMove(t,h)||"w"!=this.board[h][t][1].name[0]?this.checkOnMove(t,s)||this.lastMoved[0]!=t||this.lastMoved[1]!=s||"P"==this.board[s][t][1].name[1]&&"w"==this.board[s][t][1].name[0]&&this.isLongP&&(e&&(n.ismove=!0,this.lastMoved=[t,h],this.board[s][t][0]=this.board[s][t][0].slice(0,1),this.board[s][t][1]=void 0,this.isLongP=!1),this.enPasant=!0,l=!0):(e&&(n.ismove=!0,this.lastMoved=[t,h],this.isLongP=!1),this.enPasant=!1,l=!0));else if("N"==n.name){let e=Math.abs(i-t),o=Math.abs(s-h);!(1==e&&2==o||2==e&&1==o)||null!=this.board[h][t][1]&&this.board[h][t][1].name[0]==this.color||(l=!0)}else if("R"==n.name){let e;if(i==t){e=!0;for(let t=Math.min(s,h)+1;t<Math.max(s,h);t++)if(null!=this.board[t][i][1]){e=!1;break}}else if(s==h){e=!0;for(let h=Math.min(i,t)+1;h<Math.max(i,t);h++)if(null!=this.board[s][h][1]){e=!1;break}}null==e||!e||null!=this.board[h][t][1]&&this.board[h][t][1].name[0]==this.color||(l=!0)}else if("B"==n.name){let e,o=t-i,n=h-s;if((o==n||o==-n)&&0!=o){e=!0;for(let t=1;t<Math.abs(o);t++)null!=this.board[s+t*Math.sign(n)][i+t*Math.sign(o)][1]&&(e=!1)}null==e||!e||null!=this.board[h][t][1]&&this.board[h][t][1].name[0]==this.color||(l=!0)}else if("Q"==n.name){let e;if(i==t){e=!0;for(let t=Math.min(s,h)+1;t<Math.max(s,h);t++)if(null!=this.board[t][i][1]){e=!1;break}}else if(s==h){e=!0;for(let h=Math.min(i,t)+1;h<Math.max(i,t);h++)if(null!=this.board[s][h][1]){e=!1;break}}let o,n=t-i,r=h-s;if((n==r||n==-r)&&0!=n){o=!0;for(let t=1;t<Math.abs(n);t++)null!=this.board[s+t*Math.sign(r)][i+t*Math.sign(n)][1]&&(o=!1)}!(null!=e&&e||null!=o&&o)||null!=this.board[h][t][1]&&this.board[h][t][1].name[0]==this.color||(l=!0)}else if("K"==n.name){let e=t-i,n=h-s;if(Math.abs(e)<=1&&Math.abs(n)<=1&&(0!=e||0!=n)){if(null==this.board[h][t][1]||this.board[h][t][1].name[0]!=this.color){let e=this.board[s][i][1];this.board[s][i][1]=void 0,!o&&this.underCheck(t,h)||(l=!0),this.board[s][i][1]=e}}else if((0==t||t==this.nx-1)&&h==s){let h=!1;if(h=0==t?"w"==this.color?this.RokirW[0]:this.RokirB[0]:"w"==this.color?this.RokirW[1]:this.RokirB[1],h){let h=Math.min(i,t),e=Math.max(i,t),o=!0;for(let i=h+1;i<e&&o;i++)null!=this.board[s][i][1]&&(o=!1);o&&(this.isRok=!0,l=!0)}}}let r=!1;if(n.color==this.color&&!o){let e;e="b"==this.color?this.posKings.b:this.posKings.w;let o=e[0],n=e[1];if(i!=n||s!=o){let e=this.board[h][t][1],a=this.board[s][i][1];this.board[h][t][1]=this.board[s][i][1],this.board[s][i][1]=void 0;for(let i=0;i<this.ny;i++)for(let s=0;s<this.nx;s++)null!=this.board[i][s][1]&&this.board[i][s][1].name[0]!=this.color&&(this.changeColor(),this.canMove(s,i,n,o,!1,!0)&&(r=!0,l=!1),this.changeColor());this.board[s][i][1]=a,this.board[h][t][1]=e}}if(e&&l&&!r){let e;"K"==n.name&&("w"==this.color?this.posKings.w=[h,t]:this.posKings.b=[h,t]),e="w"==this.color?this.posKings.b:this.posKings.w;let o=this.board[s][i][1],l=this.board[h][t][1];if(this.board[h][t][1]=o,this.board[s][i][1]=void 0,this.canMove(t,h,e[1],e[0],!1,!0)?"w"==this.color?this.isUnderCheckB=!0:this.isUnderCheckW=!0:(this.isUnderCheckW=!1,this.isUnderCheckB=!1),!this.isUnderCheckB&&!this.isUnderCheckW)for(let i=0;i<this.ny;i++)for(let s=0;s<this.nx;s++)null!=this.board[i][s][1]&&this.board[i][s][1].name[0]==this.color&&(this.canMove(s,i,e[1],e[0],!1,!0)?"w"==this.color?this.isUnderCheckB=!0:this.isUnderCheckW=!0:(this.isUnderCheckB=!1,this.isUnderCheckB=!1));this.board[h][t][1]=l,this.board[s][i][1]=o,this.changeColor();let r=!0;o=this.board[s][i][1],l=this.board[h][t][1],this.board[h][t][1]=o,this.board[s][i][1]=void 0;for(let i=0;i<this.ny&&r;i++)for(let s=0;s<this.nx&&r;s++)if(null!=this.board[i][s][1]&&this.board[i][s][1].name[0]==this.color)for(let t=0;t<this.ny&&r;t++)for(let h=0;h<this.nx&&r;h++)this.canMove(s,i,h,t,!1)&&(r=!1);this.board[h][t][1]=l,this.board[s][i][1]=o,this.changeColor();let a=[],c=[],d=!1,b=!1;o=this.board[s][i][1],l=this.board[h][t][1],this.board[h][t][1]=o,this.board[s][i][1]=void 0;for(let i=0;i<this.ny;i++)for(let s=0;s<this.nx;s++)null!=this.board[i][s][1]&&this.board[i][s][1].name.slice(0,1)==this.color&&"K"!=this.board[i][s][1].name.slice(1,2)&&a.push(this.board[i][s][1].name.slice(1,2));this.changeColor();for(let i=0;i<this.ny;i++)for(let s=0;s<this.nx;s++)null!=this.board[i][s][1]&&this.board[i][s][1].name.slice(0,1)==this.color&&"K"!=this.board[i][s][1].name.slice(1,2)&&c.push(this.board[i][s][1].name.slice(1,2));if(this.changeColor(),this.board[h][t][1]=l,this.board[s][i][1]=o,a.length<=1&&(0==a.length?d=!0:"N"!=a[0]&&"B"!=a[0]||(d=!0)),c.length<=1&&(0==c.length?b=!0:"N"!=c[0]&&"B"!=c[0]||(b=!0)),d&&b&&(this.isPat=!0,r=!1,console.log("DRAW, NOT ENOUGH FIGURES!!!")),r&&(this.isUnderCheckW||this.isUnderCheckB?(this.isMate=!0,"w"==this.color?console.log("WHITE WON, IT'S MATE!!!"):console.log("BLACK WON, IT'S MATE!!!")):(this.isPat=!0,console.log("DRAW, IT'S PAT!!!"))),"K"==n.name?"w"==n.color?this.RokirW=[!1,!1]:this.RokirB=[!1,!1]:"R"==n.name&&("w"==n.color?0==i?this.RokirW[0]=!1:this.RokirW[1]=!1:0==i?this.RokirB[0]=!1:this.RokirB[1]=!1),console.log("W:",this.RokirW),console.log("B:",this.RokirB),this.isRok){this.board[s][i][1];let h=this.board[s][t][1];this.board[s][i][0]=this.board[s][i][0].slice(0,1),this.board[s][i][0]=this.board[s][i][0]+h.name,this.isRok=!1}this.lastMoved=[t,h],this.changeColor()}return l}underCheck(i,s){let t=!1;null==this.board[s][i][1]&&(t=!0,this.board[s][i][1]={});let h=this.board[s][i][1].name;this.board[s][i][1].name=this.color+"K";for(let e=0;e<this.ny;e++)for(let o=0;o<this.nx;o++)if((o!=i||s!=e)&&null!=this.board[e][o][1]&&this.board[e][o][1].name[0]!=this.color)if("P"==this.board[e][o][1].name[1]){if(this.canMove(o,e,i,s,!1,!0))return t?this.board[s][i][1]=void 0:this.board[s][i][1].name=h,!0}else{if(this.changeColor(),this.canMove(o,e,i,s,!1,!0))return t?this.board[s][i][1]=void 0:this.board[s][i][1].name=h,this.changeColor(),!0;this.changeColor()}return t?this.board[s][i][1]=void 0:this.board[s][i][1].name=h,!1}changeColor(){"w"==this.color?this.color="b":this.color="w"}}class s{constructor(i,s,t,h,e=!1){this.img=document.createElement("img"),this.img.src=i,this.img.alt="Not loaded...",this.img.classList.add("figure"),this.width=h.x,this.name=i.slice(-6,-4),this.figure={},this.ignore=!1,h.y<1?this.height=h.x:this.height=h.y,null!=t?(this.posx=t.x,this.posy=t.y,s.ImageAttach(this)):console.log("position is out of range")}}function t(...i){return new s(...i)}class h{constructor(i,s){null==i?(this.x=0,this.y=0):null==s?"object"==typeof i?2==i.length?(this.x=i[0],this.y=i[1]):(this.x=i[0],this.y=i[0]):(this.x=i,this.y=0):(this.x=i,this.y=s)}}function e(...i){return new h(...i)}let o=new WebSocket("ws://localhost:3333");console.log("loaded");const n=document.getElementById("board"),l=document.getElementById("body");let r,a=!1,c=!1,d=e(),b=e(-1,-1),g=e(-1,-1),f=!1,y=e(-2,-2);e(-3,-3);let x={};function w(i,s,t){let h=s.split(" ");for(let s=0,e=h.length;s<e;s++)i.addEventListener(h[s],t,!1)}function u(){r=function(...s){return new i(...s)}(n,8);for(let i=0;i<r.nx;i++)t("./Figures/wP.png",r,e(i,1),e(r.cellSizeW));for(let i=0;i<r.nx;i++)t("./Figures/bP.png",r,e(i,r.ny-1-1),e(r.cellSizeW));t("./Figures/bN.png",r,e(1,r.ny-1),e(r.cellSizeW)),t("./Figures/bN.png",r,e(r.nx-2,r.ny-1),e(r.cellSizeW)),t("./Figures/wN.png",r,e(1,0),e(r.cellSizeW)),t("./Figures/wN.png",r,e(r.nx-2,0),e(r.cellSizeW)),t("./Figures/bR.png",r,e(0,r.ny-1),e(r.cellSizeW)),t("./Figures/bR.png",r,e(r.nx-1,r.ny-1),e(r.cellSizeW)),t("./Figures/wR.png",r,e(0,0),e(r.cellSizeW)),t("./Figures/wR.png",r,e(r.nx-1,0),e(r.cellSizeW)),t("./Figures/bB.png",r,e(2,r.ny-1),e(r.cellSizeW)),t("./Figures/bB.png",r,e(r.nx-3,r.ny-1),e(r.cellSizeW)),t("./Figures/wB.png",r,e(2,0),e(r.cellSizeW)),t("./Figures/wB.png",r,e(r.nx-3,0),e(r.cellSizeW)),t("./Figures/wQ.png",r,e(3,0),e(r.cellSizeW)),t("./Figures/bQ.png",r,e(3,r.ny-1),e(r.cellSizeW)),t("./Figures/wK.png",r,e(4,0),e(r.cellSizeW)),t("./Figures/bK.png",r,e(4,r.ny-1),e(r.cellSizeW)),w(n,"mousedown",p),w(l,"mousemove mouseup",p),w(l,"resize",v),r.setFigures();const s=()=>{r.DrawBoard(),f?r.DrawPosMoves(g,b,"#a22ac9","#f4b473","#8f8d8f"):a?r.DrawPosMoves(y,b):r.DrawPosMoves(b),r.DrawCheck("#f7e87dce","#797979ce"),r.DrawFigures(),r.DrawBorder(),window.requestAnimationFrame(s)};s()}function p(i){if("mousedown"==i.type)i.pageX>=r.offsetL&&i.pageX<=r.offsetL+r.w&&i.pageY>=r.offsetT&&i.pageY<=r.offsetT+r.h&&(!f||y.x==b.x&&y.y==b.y?r.board[b.y][b.x][0].length>1&&(a=!0,c=!1,y=e(b.x,b.y),d=e(i.clientY,i.clientX),r.board[b.y][b.x][1].posx+=(i.clientX-(r.board[b.y][b.x][1].posx+1)*r.cellSizeW-r.offsetL+r.cellSizeW/2)/r.cellSizeW,r.board[b.y][b.x][1].posy+=(i.clientY-(r.board[b.y][b.x][1].posy+1)*r.cellSizeH-r.offsetT+r.cellSizeH/2)/r.cellSizeH,r.board[b.y][b.x][1].posy=r.ny-r.board[b.y][b.x][1].posy-1):r.canMove(g.x,g.y,b.x,b.y)?(m(g,b),f=!1):null!=r.board[b.y][b.x][1]&&r.board[b.y][b.x][1].name[0]==r.color?(g=b,f=!0):f=!1);else if("mousemove"==i.type){if("board"==i.target.id.toString()){let s=e(i.clientY,i.clientX);b=r.GetPosBoard(s);try{a&&(b.x==y.x&&b.y==y.y||(c=!0))}catch(i){}}else a||(b=e(-1,-1),c=!0);a&&(r.board[y.y][y.x][1].posx+=(i.clientX-d.y)/r.cellSizeW,r.board[y.y][y.x][1].posy+=(d.x-i.clientY)/r.cellSizeH,d=e(i.clientY,i.clientX))}else if("mouseup"==i.type&&a)if(a=!1,"board"!=i.target.id.toString())r.board[y.y][y.x][1].posx=y.x,r.board[y.y][y.x][1].posy=r.ny-y.y-1,g=e(-1,-1),f=!1;else{let i=Math.floor(r.board[y.y][y.x][1].posx+.5),s=r.ny-Math.floor(r.board[y.y][y.x][1].posy+.5)-1;s==y.y&&i==y.x||!r.canMove(y.x,y.y,i,s)?(r.board[y.y][y.x][1].posx=y.x,r.board[y.y][y.x][1].posy=r.ny-y.y-1,c||f?(g=e(-1,-1),f=!1):(g=e(y.x,y.y),f=!0)):(m(y,e(i,s)),f=!1,g=e(-1,-1))}}function m(i,s){r.board[s.y][s.x][1]=r.board[i.y][i.x][1],r.board[i.y][i.x][1]=void 0;let t=r.board[i.y][i.x][0].slice(1);r.board[i.y][i.x][0]=r.board[i.y][i.x][0].slice(0,1),r.board[s.y][s.x][0]=r.board[s.y][s.x][0].slice(0,1),r.board[s.y][s.x][0]+=t,r.board[s.y][s.x][1].posx=s.x,r.board[s.y][s.x][1].posy=r.ny-s.y-1,x.event="new board",x.board=r.board,o.send(JSON.stringify(x))}function v(i){r.UpdateInfo(n,e(i.currentTarget.innerWidth,i.currentTarget.innerHeight))}window.onresize=v,o.onmessage=async i=>{!async function(i){"new board"===i.event?(console.log(i),console.log(i.board),r.NewBoard(i.board)):console.log(`Unknown event: ${i.event}`)}(JSON.parse(i.data))},window.addEventListener("load",(()=>{u()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
