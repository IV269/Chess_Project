!function(){"use strict";class s{constructor(s,i,t=-1,o="rgb(12,36,98)",e="rgb(178 189,231)"){this.can=s,this.nx=i>0?i:8,this.ny=t<1?this.nx:t>0?t:this.nx,this.blackcolor=o,this.whitecolor=e,this.prevx=0,this.prevy=0,this.prevWidth=this.can.width,this.prevHeight=this.can.height,this.offsetL=this.can.offsetLeft,this.offsetT=this.can.offsetTop+50,this.w=this.can.width,this.h=this.can.height,this.constW=this.can.width,this.constH=this.can.height,this.cellSizeW=this.w/this.nx,this.cellSizeH=this.h/this.ny,this.board=[],this.lastMoved=[-1,-1],this.isLongP=!1,this.enPasant=!1,this.color="w",this.posKings={},this.lastPiece=h(-2,-2),this.Poses=new Set,this.isUnderCheckB=!1,this.isUnderCheckW=!1,this.isMate=!1,this.RokirW=[!0,!0],this.RokirB=[!0,!0],this.isRok=!1,this.toPromote=h(-1,-1),this.isPromote=!1;for(let s=0;s<this.ny;s++)this.board[s]=[];for(let s=0;s<this.ny;s++)for(let i=0;i<this.nx;i++)this.board[this.ny-s-1][i]=(i+s)%2==1?["w",void 0]:["b",void 0]}UpdateInfo(s,i){let t=i.x,o=i.y,e=0,h=0,n=0;t<this.w*this.nx&&(e=Math.ceil((this.w-t)/this.nx)),o<this.h*this.ny&&(h=Math.ceil((this.h-o)/this.ny)),n=Math.max(e*this.nx,h*this.ny),0==n&&this.prevx>=0&&this.prevy>=0&&(this.w<this.constW&&t>this.w&&(e=Math.ceil((t-this.w)/this.nx)),this.h<this.constH&&o>this.h&&(h=Math.ceil((o-this.h)/this.ny)),-1!=this.prevx&&-1!=this.prevy&&(n=-Math.min(Math.max(e*this.nx,h*this.ny),Math.min(o-this.h,t-this.w)))),s.width-=n,s.height-=n,(s.width>this.constW||s.height>this.constH)&&(s.width=this.constW,s.height=this.constH),this.prevx=t-this.prevWidth,this.prevy=o-this.prevHeight,this.prevWidth=t,this.prevHeight=o,0==n&&(this.prevx=0,this.prevy=0),this.can=s,this.w=this.can.width,this.h=this.can.height,this.offsetL=this.can.offsetLeft,this.cellSizeW=this.w/this.nx,this.cellSizeH=this.h/this.ny,this.offsetT=this.can.offsetTop+50;for(let s=0;s<this.ny;s++)for(let i=0;i<this.nx;i++)null!=this.board[s][i][1]&&(this.board[s][i][1].width=this.w/this.nx,this.board[s][i][1].height=this.h/this.ny,this.ImageAttach(this.board[s][i][1]))}DrawBoard(){let s=this.can.getContext("2d");s.beginPath();for(let i=0;i<this.ny;i++)for(let t=0;t<this.nx;t++)"b"==this.board[i][t][0][0]?s.fillStyle=this.blackcolor:s.fillStyle=this.whitecolor,s.fillRect(t*this.w/this.nx,i*this.h/this.ny,(t+1)*this.w/this.nx,(i+1)*this.h/this.ny);s.stroke()}DrawFigures(){let s=this.can.getContext("2d");s.beginPath(),this.isMate?"w"==this.color?"K"==this.board[this.posKings.w[0]][this.posKings.w[1]][0].slice(2,3)&&(this.board[this.posKings.w[0]][this.posKings.w[1]][0]=this.board[this.posKings.w[0]][this.posKings.w[1]][0].slice(0,1),this.board[this.posKings.w[0]][this.posKings.w[1]][1]=void 0,o("./Figures/wS.png",this,h(this.posKings.w[1],this.ny-this.posKings.w[0]-1),h(this.cellSizeW))):"K"==this.board[this.posKings.b[0]][this.posKings.b[1]][0].slice(2,3)&&(this.board[this.posKings.b[0]][this.posKings.b[1]][0]=this.board[this.posKings.b[0]][this.posKings.b[1]][0].slice(0,1),this.board[this.posKings.b[0]][this.posKings.b[1]][1]=void 0,o("./Figures/bS.png",this,h(this.posKings.b[1],this.ny-this.posKings.b[0]-1),h(this.cellSizeW))):this.isPat&&("K"==this.board[this.posKings.w[0]][this.posKings.w[1]][0].slice(2,3)&&"w"==this.board[this.posKings.w[0]][this.posKings.w[1]][0].slice(1,2)?(this.board[this.posKings.w[0]][this.posKings.w[1]][0]=this.board[this.posKings.w[0]][this.posKings.w[1]][0].slice(0,1),this.board[this.posKings.w[0]][this.posKings.w[1]][1]=void 0,o("./Figures/wS.png",this,h(this.posKings.w[1],this.ny-this.posKings.w[0]-1),h(this.cellSizeW))):"K"==this.board[this.posKings.b[0]][this.posKings.b[1]][0].slice(2,3)&&"b"==this.board[this.posKings.b[0]][this.posKings.b[1]][0].slice(1,2)&&(this.board[this.posKings.b[0]][this.posKings.b[1]][0]=this.board[this.posKings.b[0]][this.posKings.b[1]][0].slice(0,1),this.board[this.posKings.b[0]][this.posKings.b[1]][1]=void 0,o("./Figures/bS.png",this,h(this.posKings.b[1],this.ny-this.posKings.b[0]-1),h(this.cellSizeW))));for(let i=0;i<this.ny;i++)for(let t=0;t<this.nx;t++)null!=this.board[i][t][1]&&s.drawImage(this.board[i][t][1].img,this.board[i][t][1].posx*this.cellSizeW,(this.ny-this.board[i][t][1].posy-1)*this.cellSizeH,this.board[i][t][1].width,this.board[i][t][1].height);s.stroke()}DrawBorder(){let s=this.can.getContext("2d");s.beginPath(),s.moveTo(0,0),s.lineTo(this.w,0),s.stroke(),s.moveTo(0,0),s.moveTo(this.w,0),s.lineTo(this.w,this.h),s.stroke(),s.moveTo(this.w,this.h),s.lineTo(0,this.h),s.stroke(),s.moveTo(0,this.h),s.lineTo(0,0),s.stroke()}DrawPosMoves(s,i=void 0,t="#c22958",o="#76e08c",e="#e07693"){if(null==s)return;let n=s.x,l=s.y;if(null==n||null==l||n<0||l<0||n>=this.nx||l>=this.ny)return;let r=this.can.getContext("2d");r.beginPath();let a=!1;if(this.lastPiece.x>=0&&this.lastPiece.y>=0&&this.lastPiece.x<this.nx&&this.lastPiece.y<this.ny&&n==this.lastPiece.x&&l==this.lastPiece.y?a=!0:this.Poses.clear(),this.lastPiece=h(s.x,s.y),a){let s,i,e,h;for(const n of this.Poses)"norm"==n[0]?(r.fillStyle=t,e=Math.min(this.w/this.nx,this.h/this.ny)/4,s=(n[1].x*this.w+this.w/2)/this.nx-e/2,i=(n[1].y*this.h+this.h/2)/this.ny-e/2,r.fillRect(s,i,e,e)):"eat"==n[0]?(r.fillStyle=o,e=this.w/this.nx,h=this.h/this.ny,s=n[1].x*this.w/this.nx,i=n[1].y*this.h/this.ny,r.fillRect(s,i,e,h)):"old"==n[0]&&(r.fillStyle=t,r.fillRect(n[1].x*this.w/this.nx,n[1].y*this.h/this.ny,this.w/this.nx,this.h/this.ny))}else for(let s=0;s<this.ny;s++)for(let i=0;i<this.nx;i++)if(s==l&&i==n)r.fillStyle=t,r.fillRect(n*this.w/this.nx,l*this.h/this.ny,this.w/this.nx,this.h/this.ny),this.Poses.add(["old",h(n,l)]);else if(null!=this.board[l][n][1]&&this.canMove(n,l,i,s,!1)[0]){let e,n,l;if(null!=this.board[s][i][1]||this.enPasant){r.fillStyle=o,l=this.w/this.nx;let t=this.h/this.ny;e=i*this.w/this.nx,n=s*this.h/this.ny,r.fillRect(e,n,l,t),this.Poses.add(["eat",h(i,s)])}else r.fillStyle=t,l=Math.min(this.w/this.nx,this.h/this.ny)/4,e=(i*this.w+this.w/2)/this.nx-l/2,n=(s*this.h+this.h/2)/this.ny-l/2,r.fillRect(e,n,l,l),this.Poses.add(["norm",h(i,s)])}if(null!=i){let s=i.x,t=i.y;if(null==s||null==t||s<0||t<0||s>=this.nx||t>=this.ny||n==s&&l==t)return;r.fillStyle=e,r.fillRect(s*this.w/this.nx,t*this.h/this.ny,this.w/this.nx,this.h/this.ny)}r.stroke()}DrawCheck(s="#f7e87dce",i="#3e3d3cce"){if(this.isUnderCheckB||this.isUnderCheckW||this.isPat){let t,o,e,h=this.can.getContext("2d");h.beginPath(),t=this.isUnderCheckB?this.posKings.b:this.posKings.w,o=t[1],e=t[0],this.isMate?h.fillStyle=i:h.fillStyle=s,this.isPat?this.isPat&&(h.fillStyle=i,t=this.posKings.b,o=t[1],e=t[0],h.fillRect(o*this.w/this.nx,e*this.h/this.ny,this.w/this.nx,this.h/this.ny),t=this.posKings.w,o=t[1],e=t[0],h.fillRect(o*this.w/this.nx,e*this.h/this.ny,this.w/this.nx,this.h/this.ny)):h.fillRect(o*this.w/this.nx,e*this.h/this.ny,this.w/this.nx,this.h/this.ny),h.stroke()}}GetPosBoard(s,i){if("object"!=typeof s){if(null==i||null==s||i<this.offsetT||i>this.offsetT+this.w||s<this.offsetL||s>this.offsetL+this.h)return;return h(Math.floor((s-this.offsetL)/this.h*this.ny),Math.floor((i-this.offsetT)/this.w*this.nx))}if(!(null==s.x||null==s.y||s.x<this.offsetT||s.x>this.offsetT+this.w||s.y<this.offsetL||s.y>this.offsetL+this.h))return h(Math.floor((s.y-this.offsetL)/this.h*this.ny),Math.floor((s.x-this.offsetT)/this.w*this.nx))}GetPosReal(s,i){if("object"!=typeof s){if(null==i||null==s||i<0||s<0||i>=this.nx||s>=this.ny)return;return h(this.h-(s+1)*this.cellSizeH+this.offsetT,i*this.cellSizeW+this.offsetL)}if(!(null==s.x||null==s.y||s.x<0||s.y<0||s.x>=this.nx||s.y>=this.ny))return h(this.h-(s.y+1)*this.cellSizeH+this.offsetT,s.x*this.cellSizeW+this.offsetL)}GetPosRealBoard(s,i){if("object"!=typeof s){if(null==i||null==s||i<0||s<0||i>=this.ny||s>=this.nx)return;return h(this.h-(s+1)*this.cellSizeH,i*this.cellSizeW)}if(!(null==s.x||null==s.y||s.x<0||s.y<0||s.x>=this.ny||s.y>=this.nx))return h(this.h-(s.y+1)*this.cellSizeH,s.x*this.cellSizeW)}toReversed(s){return h(s.x,this.ny-s.y-1)}ImageAttach(s){try{let i=s.posx,t=this.ny-s.posy-1,o=this.GetPosRealBoard(i,t);null!=o&&1==this.board[t][i][0].length?("K"==s.name[1]&&("b"==s.name[0]?this.posKings.b=[t,i]:this.posKings.w=[t,i]),this.board[t][i][1]=s,this.board[t][i][0]+=s.name):null==o&&console.log("Something wrong in coordinates...")}catch(s){console.log(`Function: "ImageAttach": ${s}`)}}NewBoard(s){for(let i=0;i<this.ny;i++)for(let t=0;t<this.nx;t++)this.board[i][t]=[],this.board[i][t][0]=s[i][t][0],this.board[i][t][1]=void 0,this.board[i][t][0].length>1&&(this.board[i][t][1]=o(`./Figures/${this.board[i][t][0].slice(1)}.png`,this,h(t,this.ny-i-1),h(this.cellSizeW,this.cellSizeH)))}setFigures(){for(let s=0;s<this.ny;s++)for(let i=0;i<this.nx;i++)null!=this.board[s][i][1]&&this.figure(i,s)}figure(s,i){this.board[i][s][1].figure.name=this.board[i][s][1].name[1],this.board[i][s][1].figure.color=this.board[i][s][1].name[0],this.board[i][s][1].figure.ismove=!1,this.board[i][s][1].figure.isLocked=!1}checkOnMove(s,i){return null==this.board[i][s][1]}canMove(s,i,t,o,e=!0,n=!1){let l=this.board[i][s][1].figure,r=!1,a=!1;if(this.enPasant=!1,l.color==this.color||n)if("P"==l.name)"w"==l.color?s==t?i==o+1?this.checkOnMove(s,o)&&(e&&(l.ismove=!0,this.lastMoved=[t,o],this.isLongP=!1),this.enPasant=!1,r=!0):i==o+2&&this.checkOnMove(s,o+1)&&this.checkOnMove(s,o)&&!l.ismove&&(e&&(l.ismove=!0,this.lastMoved=[t,o],this.isLongP=!0),this.enPasant=!1,r=!0):t!=s-1&&t!=s+1||i==o+1&&(this.checkOnMove(t,o)||"b"!=this.board[o][t][1].name[0]?this.checkOnMove(t,i)||this.lastMoved[0]!=t||this.lastMoved[1]!=i||"P"==this.board[i][t][1].name[1]&&"b"==this.board[i][t][1].name[0]&&this.isLongP&&(e&&(l.ismove=!0,this.lastMoved=[t,o],this.board[i][t][0]=this.board[i][t][0].slice(0,1),this.board[i][t][1]=void 0,this.isLongP=!1),this.enPasant=!0,r=!0):(e&&(l.ismove=!0,this.lastMoved=[t,o],this.isLongP=!1),this.enPasant=!1,r=!0)):s==t?i==o-1?this.checkOnMove(s,o)&&(e&&(l.ismove=!0,this.lastMoved=[t,o],this.isLongP=!1),this.enPasant=!1,r=!0):i==o-2&&this.checkOnMove(s,o-1)&&this.checkOnMove(s,o)&&!l.ismove&&(e&&(l.ismove=!0,this.lastMoved=[t,o],this.isLongP=!0),this.enPasant=!1,r=!0):t!=s-1&&t!=s+1||i==o-1&&(this.checkOnMove(t,o)||"w"!=this.board[o][t][1].name[0]?this.checkOnMove(t,i)||this.lastMoved[0]!=t||this.lastMoved[1]!=i||"P"==this.board[i][t][1].name[1]&&"w"==this.board[i][t][1].name[0]&&this.isLongP&&(e&&(l.ismove=!0,this.lastMoved=[t,o],this.board[i][t][0]=this.board[i][t][0].slice(0,1),this.board[i][t][1]=void 0,this.isLongP=!1),this.enPasant=!0,r=!0):(e&&(l.ismove=!0,this.lastMoved=[t,o],this.isLongP=!1),this.enPasant=!1,r=!0));else if("N"==l.name){let e=Math.abs(s-t),h=Math.abs(i-o);!(1==e&&2==h||2==e&&1==h)||null!=this.board[o][t][1]&&this.board[o][t][1].name[0]==this.color||(r=!0)}else if("C"==l.name){let e=Math.abs(s-t),h=Math.abs(i-o);!(1==e&&3==h||3==e&&1==h)||null!=this.board[o][t][1]&&this.board[o][t][1].name[0]==this.color||(r=!0)}else if("R"==l.name){let e;if(s==t){e=!0;for(let t=Math.min(i,o)+1;t<Math.max(i,o);t++)if(null!=this.board[t][s][1]){e=!1;break}}else if(i==o){e=!0;for(let o=Math.min(s,t)+1;o<Math.max(s,t);o++)if(null!=this.board[i][o][1]){e=!1;break}}null==e||!e||null!=this.board[o][t][1]&&this.board[o][t][1].name[0]==this.color||(r=!0)}else if("B"==l.name){let e,h=t-s,n=o-i;if((h==n||h==-n)&&0!=h){e=!0;for(let t=1;t<Math.abs(h);t++)null!=this.board[i+t*Math.sign(n)][s+t*Math.sign(h)][1]&&(e=!1)}null==e||!e||null!=this.board[o][t][1]&&this.board[o][t][1].name[0]==this.color||(r=!0)}else if("Q"==l.name){let e;if(s==t){e=!0;for(let t=Math.min(i,o)+1;t<Math.max(i,o);t++)if(null!=this.board[t][s][1]){e=!1;break}}else if(i==o){e=!0;for(let o=Math.min(s,t)+1;o<Math.max(s,t);o++)if(null!=this.board[i][o][1]){e=!1;break}}let h,n=t-s,l=o-i;if((n==l||n==-l)&&0!=n){h=!0;for(let t=1;t<Math.abs(n);t++)null!=this.board[i+t*Math.sign(l)][s+t*Math.sign(n)][1]&&(h=!1)}!(null!=e&&e||null!=h&&h)||null!=this.board[o][t][1]&&this.board[o][t][1].name[0]==this.color||(r=!0)}else if("K"==l.name){let h=t-s,l=o-i;if(Math.abs(h)<=1&&Math.abs(l)<=1&&(0!=h||0!=l)){if(null==this.board[o][t][1]||this.board[o][t][1].name[0]!=this.color){let e=this.board[i][s][1];this.board[i][s][1]=void 0,!n&&this.underCheck(t,o)||(r=!0),this.board[i][s][1]=e}}else if((0==t||t==this.nx-1||2==Math.abs(s-t))&&o==i){let o=!1;if(2==Math.abs(s-t)&&(t=t>s?this.nx-1:0),o=0==t?"w"==this.color?this.RokirW[0]:this.RokirB[0]:"w"==this.color?this.RokirW[1]:this.RokirB[1],null!=this.board[i][t][1]&&null!=this.board[i][t][1].name&&this.board[i][t][1].name[0]==this.color&&"R"==this.board[i][t][1].name[1]||(o=!1),o){let o=Math.min(s,t),h=Math.max(s,t),n=!0;for(let s=o+1;s<h&&n;s++)null!=this.board[i][s][1]&&(n=!1);let l=!1;if(n)for(let o=0;o<this.ny&&!l;o++)for(let e=0;e<this.nx&&!l;e++)if(null!=this.board[o][e][1]&&this.board[o][e][1].name[0]!=this.color)for(let h=0;h<=2&&!l;h++)this.changeColor(),0!=h&&(this.board[i][s+Math.sign(t-s)*h][1]=this.board[i][s][1]),this.canMove(e,o,s+Math.sign(t-s)*h,i,!1)[0]&&(l=!0),0!=h&&(this.board[i][s+Math.sign(t-s)*h][1]=void 0),this.changeColor();n&&!l&&(e&&(this.isRok=!0),r=!0)}}}let d=!1;if(l.color==this.color&&!n){let e;e="b"==this.color?this.posKings.b:this.posKings.w;let h=e[0],n=e[1];if(s!=n||i!=h){let e=this.board[o][t][1],l=this.board[i][s][1];this.board[o][t][1]=this.board[i][s][1],this.board[i][s][1]=void 0;for(let s=0;s<this.ny;s++)for(let i=0;i<this.nx;i++)null!=this.board[s][i][1]&&this.board[s][i][1].name[0]!=this.color&&(this.changeColor(),this.canMove(i,s,n,h,!1,!0)[0]&&(d=!0,r=!1),this.changeColor());this.board[i][s][1]=l,this.board[o][t][1]=e}}if(e&&r&&!d){let e;"K"==l.name&&("w"==this.color?this.posKings.w=[o,t]:this.posKings.b=[o,t]),e="w"==this.color?this.posKings.b:this.posKings.w;let n=this.board[i][s][1],r=this.board[o][t][1];if(this.board[o][t][1]=n,this.board[i][s][1]=void 0,this.canMove(t,o,e[1],e[0],!1,!0)[0]?"w"==this.color?this.isUnderCheckB=!0:this.isUnderCheckW=!0:(this.isUnderCheckW=!1,this.isUnderCheckB=!1),!this.isUnderCheckB&&!this.isUnderCheckW)for(let s=0;s<this.ny;s++)for(let i=0;i<this.nx;i++)null!=this.board[s][i][1]&&this.board[s][i][1].name[0]==this.color&&(this.canMove(i,s,e[1],e[0],!1,!0)[0]?"w"==this.color?this.isUnderCheckB=!0:this.isUnderCheckW=!0:(this.isUnderCheckB=!1,this.isUnderCheckB=!1));this.board[o][t][1]=r,this.board[i][s][1]=n,this.changeColor();let d=!0;n=this.board[i][s][1],r=this.board[o][t][1],this.board[o][t][1]=n,this.board[i][s][1]=void 0;for(let s=0;s<this.ny&&d;s++)for(let i=0;i<this.nx&&d;i++)if(null!=this.board[s][i][1]&&this.board[s][i][1].name[0]==this.color)for(let t=0;t<this.ny&&d;t++)for(let o=0;o<this.nx&&d;o++)this.canMove(i,s,o,t,!1)[0]&&(d=!1);this.board[o][t][1]=r,this.board[i][s][1]=n,this.changeColor();let b=[],c=[],g=!1,f=!1;n=this.board[i][s][1],r=this.board[o][t][1],this.board[o][t][1]=n,this.board[i][s][1]=void 0;for(let s=0;s<this.ny;s++)for(let i=0;i<this.nx;i++)null!=this.board[s][i][1]&&this.board[s][i][1].name.slice(0,1)==this.color&&"K"!=this.board[s][i][1].name.slice(1,2)&&b.push(this.board[s][i][1].name.slice(1,2));this.changeColor();for(let s=0;s<this.ny;s++)for(let i=0;i<this.nx;i++)null!=this.board[s][i][1]&&this.board[s][i][1].name.slice(0,1)==this.color&&"K"!=this.board[s][i][1].name.slice(1,2)&&c.push(this.board[s][i][1].name.slice(1,2));this.changeColor(),this.board[o][t][1]=r,this.board[i][s][1]=n,b.length<=1&&(0==b.length?g=!0:"N"!=b[0]&&"B"!=b[0]||(g=!0)),c.length<=1&&(0==c.length?f=!0:"N"!=c[0]&&"B"!=c[0]||(f=!0)),g&&f&&(this.isPat=!0,d=!1,console.log("DRAW, NOT ENOUGH FIGURES!!!")),d&&(this.isUnderCheckW||this.isUnderCheckB?(this.isMate=!0,"w"==this.color?console.log("WHITE WON, IT'S MATE!!!"):console.log("BLACK WON, IT'S MATE!!!")):(this.isPat=!0,console.log("DRAW, IT'S PAT!!!"))),"K"==l.name?"w"==l.color?this.RokirW=[!1,!1]:this.RokirB=[!1,!1]:"R"==l.name&&("w"==l.color?0!=s||i!=this.ny-1&&o!=this.ny-1?s!=this.nx-1||i!=this.ny-1&&o!=this.ny-1||(this.RokirW[1]=!1):this.RokirW[0]=!1:0!=s||0!=i&&0!=o?s!=this.nx-1||0!=i&&0!=o||(this.RokirB[1]=!1):this.RokirB[0]=!1),this.isRok&&(this.isRok=!1,a=!0),this.lastMoved=[t,o],this.changeColor(),"P"==this.board[i][s][1].name[1]&&("b"==this.board[i][s][1].name[0]&&o==this.ny-1||"w"==this.board[i][s][1].name[0]&&0==o)&&(console.log("Pawn need to be promoted."),this.toPromote=h(t,o),this.isPromote=!0)}return[r,a]}underCheck(s,i){let t=!1;null==this.board[i][s][1]&&(t=!0,this.board[i][s][1]={});let o=this.board[i][s][1].name;this.board[i][s][1].name=this.color+"K";for(let e=0;e<this.ny;e++)for(let h=0;h<this.nx;h++)if((h!=s||i!=e)&&null!=this.board[e][h][1]&&this.board[e][h][1].name[0]!=this.color)if("P"==this.board[e][h][1].name[1]){if(this.canMove(h,e,s,i,!1,!0)[0])return t?this.board[i][s][1]=void 0:this.board[i][s][1].name=o,!0}else{if(this.changeColor(),this.canMove(h,e,s,i,!1,!0)[0])return t?this.board[i][s][1]=void 0:this.board[i][s][1].name=o,this.changeColor(),!0;this.changeColor()}return t?this.board[i][s][1]=void 0:this.board[i][s][1].name=o,!1}changeColor(){"w"==this.color?this.color="b":this.color="w"}}function i(...i){return new s(...i)}class t{constructor(s,i,t,o,e=!1){this.img=document.createElement("img"),this.img.src=s,this.img.alt="Not loaded...",this.img.classList.add("figure"),this.width=o.x,this.name=s.slice(-6,-4),this.figure={},this.ignore=!1,o.y<1?this.height=o.x:this.height=o.y,null!=t?(this.posx=t.x,this.posy=t.y,i.ImageAttach(this)):console.log("position is out of range")}}function o(...s){return new t(...s)}class e{constructor(s,i){null==s?(this.x=0,this.y=0):null==i?"object"==typeof s?2==s.length?(this.x=s[0],this.y=s[1]):(this.x=s[0],this.y=s[0]):(this.x=s,this.y=0):(this.x=s,this.y=i)}}function h(...s){return new e(...s)}let n=new WebSocket("ws://localhost:3333");console.log("loaded");const l=document.getElementById("board"),r=document.getElementById("body"),a=document.getElementById("promote");let d,b,c=-1,g=!1,f=!1,y=h(),x=h(-1,-1),p=h(-1,-1),u=!1,w=h(-2,-2),m=h(-1,-1),v=[],M={};function S(s,i,t){let o=i.split(" ");for(let i=0,e=o.length;i<e;i++)s.addEventListener(o[i],t,!1)}function P(s){if("body"!=s.target.id&&"board"!=s.target.id||d.isPromote)if("promote"==s.target.id){if("mousemove"==s.type){let i=s.clientX-a.offsetLeft;0==i&&(i=1),m=h(Math.floor(i/b.cellSizeW),0),m.x!=c&&(c=-1)}else if("mousedown"==s.type)c=m.x;else if("mouseup"==s.type&&-1!=c&&c==m.x&&d.toPromote.x>=0){d.isPromote=!1,d.board[d.toPromote.y][d.toPromote.x][1]=void 0;let s=v[c].name;s=d.board[d.toPromote.y][d.toPromote.x][0].slice(1,2)+s.slice(1,2),d.board[d.toPromote.y][d.toPromote.x][0]=d.board[d.toPromote.y][d.toPromote.x][0].slice(0,1),o(`./Figures/${s}.png`,d,h(d.toPromote.x,d.ny-d.toPromote.y-1),h(d.cellSizeW,d.cellSizeH)),d.toPromote=h(-1,-1),d.setFigures(),a.style.display="none"}}else d.isPromote?a.style.display="block":a.style.display="none",m=h(-1,-1);else if(m=h(-1,-1),"mousedown"==s.type){if(s.pageX>=d.offsetL&&s.pageX<=d.offsetL+d.w&&s.pageY>=d.offsetT&&s.pageY<=d.offsetT+d.h)if(!u||w.x==x.x&&w.y==x.y)d.board[x.y][x.x][0].length>1&&(g=!0,f=!1,w=h(x.x,x.y),y=h(s.clientY,s.clientX),d.board[x.y][x.x][1].posx+=(s.clientX-(d.board[x.y][x.x][1].posx+1)*d.cellSizeW-d.offsetL+d.cellSizeW/2)/d.cellSizeW,d.board[x.y][x.x][1].posy+=(s.clientY-(d.board[x.y][x.x][1].posy+1)*d.cellSizeH-d.offsetT+d.cellSizeH/2)/d.cellSizeH,d.board[x.y][x.x][1].posy=d.ny-d.board[x.y][x.x][1].posy-1);else{let s=d.canMove(p.x,p.y,x.x,x.y);if(s[0]&&!s[1])K(p,x),u=!1;else if(s[1]){u=!1;let s,i=p.x,t=p.y;p=h(-1,-1),s=x.x>i?d.nx-1:0;let o=d.board[t][i][1],e=d.board[t][s][1];s>i?(d.board[t][i][0]=d.board[t][i][0].slice(0,1),d.board[t][i][1]=void 0,d.board[t][i+1][0]=d.board[t][i+1][0]+e.name,d.board[t][i+1][1]=e,d.board[t][s][0]=d.board[t][s][0].slice(0,1),d.board[t][s][1]=void 0,d.board[t][i+2][0]=d.board[t][i+2][0]+o.name,d.board[t][i+2][1]=o,d.board[t][i+2][1].posx=i+2,d.board[t][i+2][1].posy=d.ny-t-1,d.board[t][i+1][1].posx=i+1,d.board[t][i+1][1].posy=d.ny-t-1,"w"==d.board[t][i+2][1].name[0]?d.posKings.w=[t,i+2]:d.posKings.b=[t,i+2]):(d.board[t][i][0]=d.board[t][i][0].slice(0,1),d.board[t][i][1]=void 0,d.board[t][i-1][0]=d.board[t][i-1][0]+e.name,d.board[t][i-1][1]=e,d.board[t][s][0]=d.board[t][s][0].slice(0,1),d.board[t][s][1]=void 0,d.board[t][i-2][0]=d.board[t][i-2][0]+o.name,d.board[t][i-2][1]=o,d.board[t][i-2][1].posx=i-2,d.board[t][i-2][1].posy=d.ny-t-1,d.board[t][i-1][1].posx=i-1,d.board[t][i-1][1].posy=d.ny-t-1,"w"==d.board[t][i-2][1].name[0]?d.posKings.w=[t,i-2]:d.posKings.b=[t,i-2])}else null!=d.board[x.y][x.x][1]&&d.board[x.y][x.x][1].name[0]==d.color?(p=x,u=!0):u=!1}}else if("mousemove"==s.type){if("board"==s.target.id.toString()){let i=h(s.clientY,s.clientX);x=d.GetPosBoard(i);try{g&&(x.x==w.x&&x.y==w.y||(f=!0))}catch(s){}}else g||(x=h(-1,-1),f=!0);g&&(d.board[w.y][w.x][1].posx+=(s.clientX-y.y)/d.cellSizeW,d.board[w.y][w.x][1].posy+=(y.x-s.clientY)/d.cellSizeH,y=h(s.clientY,s.clientX))}else if("mouseup"==s.type&&g)if(g=!1,"board"!=s.target.id.toString())d.board[w.y][w.x][1].posx=w.x,d.board[w.y][w.x][1].posy=d.ny-w.y-1,p=h(-1,-1),u=!1;else{let s=Math.floor(d.board[w.y][w.x][1].posx+.5),i=d.ny-Math.floor(d.board[w.y][w.x][1].posy+.5)-1,t=d.canMove(w.x,w.y,s,i);if(i==w.y&&s==w.x||!t[0]||t[1]){if(console.log(w),t[1]){let i,t=w.x,o=w.y;i=s>t?d.nx-1:0;let e=d.board[o][t][1],h=d.board[o][i][1];i>t?(d.board[o][t][0]=d.board[o][t][0].slice(0,1),d.board[o][t][1]=void 0,d.board[o][t+1][0]=d.board[o][t+1][0]+h.name,d.board[o][t+1][1]=h,d.board[o][i][0]=d.board[o][i][0].slice(0,1),d.board[o][i][1]=void 0,d.board[o][t+2][0]=d.board[o][t+2][0]+e.name,d.board[o][t+2][1]=e,d.board[o][t+2][1].posx=t+2,d.board[o][t+2][1].posy=d.ny-o-1,d.board[o][t+1][1].posx=t+1,d.board[o][t+1][1].posy=d.ny-o-1,"w"==d.board[o][t+2][1].name[0]?d.posKings.w=[o,t+2]:d.posKings.b=[o,t+2]):(d.board[o][t][0]=d.board[o][t][0].slice(0,1),d.board[o][t][1]=void 0,d.board[o][t-1][0]=d.board[o][t-1][0]+h.name,d.board[o][t-1][1]=h,d.board[o][i][0]=d.board[o][i][0].slice(0,1),d.board[o][i][1]=void 0,d.board[o][t-2][0]=d.board[o][t-2][0]+e.name,d.board[o][t-2][1]=e,d.board[o][t-2][1].posx=t-2,d.board[o][t-2][1].posy=d.ny-o-1,d.board[o][t-1][1].posx=t-1,d.board[o][t-1][1].posy=d.ny-o-1,"w"==d.board[o][t-2][1].name[0]?d.posKings.w=[o,t-2]:d.posKings.b=[o,t-2])}else d.board[w.y][w.x][1].posx=w.x,d.board[w.y][w.x][1].posy=d.ny-w.y-1;f||u?(p=h(-1,-1),u=!1):(p=h(w.x,w.y),u=!0)}else K(w,h(s,i)),u=!1,p=h(-1,-1)}}function K(s,i){d.board[i.y][i.x][1]=d.board[s.y][s.x][1],d.board[s.y][s.x][1]=void 0;let t=d.board[s.y][s.x][0].slice(1);d.board[s.y][s.x][0]=d.board[s.y][s.x][0].slice(0,1),d.board[i.y][i.x][0]=d.board[i.y][i.x][0].slice(0,1),d.board[i.y][i.x][0]+=t,d.board[i.y][i.x][1].posx=i.x,d.board[i.y][i.x][1].posy=d.ny-i.y-1,M.event="new board",M.board=d.board,n.send(JSON.stringify(M))}function W(s){d.UpdateInfo(l,h(s.currentTarget.innerWidth,s.currentTarget.innerHeight))}window.onresize=W,n.onmessage=async s=>{!async function(s){"new board"===s.event?(console.log(s),console.log(s.board),d.NewBoard(s.board)):console.log(`Unknown event: ${s.event}`)}(JSON.parse(s.data))},window.addEventListener("load",(()=>{!function(){d=i(l,8,-1),b=i(a,a.width/100,1,"rgb(105, 105, 105)","rgb(145, 145, 145)"),v.push(o("./Figures/wN.png",b,h(v.length,0),h(b.cellSizeW,b.cellSizeH))),v.push(o("./Figures/wC.png",b,h(v.length,0),h(b.cellSizeW,b.cellSizeH))),v.push(o("./Figures/wB.png",b,h(v.length,0),h(b.cellSizeW,b.cellSizeH))),v.push(o("./Figures/wR.png",b,h(v.length,0),h(b.cellSizeW,b.cellSizeH))),v.push(o("./Figures/wQ.png",b,h(v.length,0),h(b.cellSizeW,b.cellSizeH)));for(let s=0;s<d.nx;s++)o("./Figures/wP.png",d,h(s,1),h(d.cellSizeW));for(let s=0;s<d.nx;s++)o("./Figures/bP.png",d,h(s,d.ny-1-1),h(d.cellSizeW));o("./Figures/bN.png",d,h(1,d.ny-1),h(d.cellSizeW)),o("./Figures/bC.png",d,h(d.nx-2,d.ny-1),h(d.cellSizeW)),o("./Figures/wN.png",d,h(1,0),h(d.cellSizeW)),o("./Figures/wC.png",d,h(d.nx-2,0),h(d.cellSizeW)),o("./Figures/bR.png",d,h(0,d.ny-1),h(d.cellSizeW)),o("./Figures/bR.png",d,h(d.nx-1,d.ny-1),h(d.cellSizeW)),o("./Figures/wR.png",d,h(0,0),h(d.cellSizeW)),o("./Figures/wR.png",d,h(d.nx-1,0),h(d.cellSizeW)),o("./Figures/bB.png",d,h(2,d.ny-1),h(d.cellSizeW)),o("./Figures/bB.png",d,h(d.nx-3,d.ny-1),h(d.cellSizeW)),o("./Figures/wB.png",d,h(2,0),h(d.cellSizeW)),o("./Figures/wB.png",d,h(d.nx-3,0),h(d.cellSizeW)),o("./Figures/wQ.png",d,h(3,0),h(d.cellSizeW)),o("./Figures/bQ.png",d,h(3,d.ny-1),h(d.cellSizeW)),o("./Figures/wK.png",d,h(4,0),h(d.cellSizeW)),o("./Figures/bK.png",d,h(4,d.ny-1),h(d.cellSizeW)),S(l,"mousedown",P),S(r,"mousemove mouseup",P),S(r,"resize",W),S(a,"mousemove mouseup mousedown",P),S(a,"resize",W),d.setFigures();const s=()=>{d.DrawBoard(),u?d.DrawPosMoves(p,x,"#a22ac9","#f4b473","#8f8d8f"):g?d.DrawPosMoves(w,x):d.DrawPosMoves(x),d.DrawCheck("#f7e87dce","#797979ce"),d.DrawFigures(),d.DrawBorder(),b.DrawBoard(),b.DrawPosMoves(m),b.DrawFigures(),window.requestAnimationFrame(s)};s()}()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
